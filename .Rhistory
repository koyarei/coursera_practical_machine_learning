vowel.test$y <- as.factor(vowel.test$y)
class(vowel.test$y)
fit.rf <- train(y ~ ., data=vowel.train, method="rf", importance=T)
varImp(fit.rf)
summary(fit.rf)
set.seed(33833)
fit.rf <- train(y ~ ., data=vowel.train, method="rf", importance=T)
fit.gbm <- train(y ~., data=vowel.train, method="gbm")
predict.rf <- predict(train, newdata=vowel.test)
predict.rf <- predict(fit.rf, newdata=vowel.test)
predict.gbm <- predict(fit.gbm, newdata=vowel.test)
predict.rf
summary(predict.rf)
confusionMatrix(predict.rf, vowel.test$y)
confusionMatrix(predict.gbm, vowel.test$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
class(vowel.train$y)
vowel.train$y <- as.factor(vowel.train$y)
class(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
class(vowel.test$y)
set.seed(33833)
rm(fit.rf)
rm(fit.gbm)
fit.rf
fit.rf <- train(y ~., data=vowel.train, method="rf")
fit.gbm <- train(y ~., data=vowel.train, method="gbm")
predict.rf <- predict(fit.rf, newdata=vowel.test)
predict.gbm <- predict(fit.gbm, newdata=vowel.test)
confusionMatrix(predict.rf, vowel.test$y)
confusionMatrix(predict.gbm, vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
head(training)
set.seed(62433)
fit.rf <- train(diagnosis ~., data=training, method="rf")
fit.gbm <- train(diagnosis ~., data=training, method="gbm")
fit.lda <- train(diagnosis ~., data=training, method="lda")
fit.rf
fit.gbm
fit.lda
predict.rf <- predict(fit.rf, newdata=testing)
predict.gbm <- predict(fit.gbm, newdata=testing)
predict.lda <- predict(fit.lda, newdata=testing)
predict.mx <- data.frame(rf = predict.rf, gbm=predict.gbm, lda = predict.lda)
head(predict.mx)
predict.stack <- train(fit.rf, predict.mx)
predict.stack <- predict(fit.rf, predict.mx)
predict(fit.rf, predict.mx)
predict.rf
confusionMatrix(predict.rf, testing$diagnosis)
confusionMatrix(predict.gbm, testing$diagnosis)
confusionMatrix(predict.lda, testing$diagnosis)
predict.mx
head(predict.mx)
predict(fit.gbm, predict.mx)
predict.mx <- gsub("Control",0, data=predict.mx)
predict.mx <- gsub("Control",0, predict.mx)
head(predict.mx)
predict.mx <- data.frame(rf = predict.rf, gbm=predict.gbm, lda = predict.lda)
head(predict.mx)
gsub("Control", 0, predict.mx)
head(predict.mx)
class(predict.mx$rf)
fit.rf
fit.stack <- train(testing$diagnosis, data=predict.mx, method="rf")
gsub("Control", "0", predict.mx)
predict.mx
grep("Control", predict.mx)
grep("Control", predict.mx$rf)
gsub("Control", 0, predict.mx$rf)
predict.mx <- apply(predict.mx, 2, function(x) {gsub("Control", 0, x)})
head(predict.mx)
predict.mx <- apply(predict.mx, 2, function(x) {gsub("Impaired", 1, x)})
head(predict.mx)
predict.mx <- apply(predict.mx, 2, as.factor)
head(predict.mx)
class(predict.mx$rf)
class(predict.mx[,1])
predict.mx$rf
predict.mx[,1] <- as.factor(predict.mx[,1])
class(predict.mx[,1])
predict.mx$gbm
class(predict.mx)
predict.mx <- data.frame(predict.mx)
head(predict.mx)
class(predict.mx$rf)
predict(fit.rf, predict.mx)
head(mtcars)
carFit.rf <- train(mpg ~ ., data=mtcars, method="rf")
carFit.gbm <- train(mpg ~., data=mtcars, method="gbm")
carFit.lda <- train(mpg~., data=mtcars, method="lda")
carFit.lda
carTest <- createDataPartition(y=mtcars$mpg, p=0.7, list=F)
head(carTest)
car.training <- mtcars[carTest,]
car.testing <- mtcars[-carTest,]
carFit.rf <- train(mpg ~., data=car.training, method="rf")
carFit.rf
carFit.lm <- training(mpg ~., data=car.training, method="lm")
carFit.lm <- train(mpg ~., data=car.training, method="lm")
carFit.lm
car.predict.rf <- predict(carFit.rf, car.testing)
car.predict.lm <- predict(carFit.lm, car.testing)
car.total <- data.frame(rf = car.predict.rf, lm = car.predict.lm)
car.total
predict(carFit.rf, car.total)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
fit.rf <- train(diagnosis ~., data=training, method="rf")
set.seed(62433)
fit.rf <- train(diagnosis ~., data=training, method="rf")
fit.gbm <- train(diagnosis ~., data=training, method="gbm")
fit.lda <- train(diagnosis ~., data=training, method="lda")
fit.lda
testPre.rf <- predict(fit.rf, newdata=training)
testPre.gbm <- predict(fit.gbm, newdata=training)
testPre.lda <- predict(fit.lda, newdata=training)
testPre.all <- data.frame(rf=testPre.rf, gbm=testPre.gbm, lda=testPre.lda)
head(testPre.all)
testPre.all
set.seed(62433)
head(training)
fit.rf <- train(diagnosis ~., data=training, method="rf")
fit.gbm <- train(diagnosis ~., data=training, method="gbm")
fit.lda <- train(diagnosis ~., data=training, method="lda")
predict(fit.rf, newdata=training)
train.rf <- predict(fit.rf, newdata=training)
train.rf
confusionMatrix(train.rf, training$diagnosis)
predict.rf <- predict(fit.rf, newdata=testing)
predict.gbm <- predict(fit.gbm, newdata=testing)
predict.lda <- predict(fit.lda, newdata=testing)
predict.all <- data.frame(rf=predict.rf, gbm=predict.gbm, lda=predict.lda)
head(predict.all)
fit.final <- train(testing$diagnosis ~ predict.all, data=predict.all, method="rf")
fit.final <- train(testing$diagnosis ~ predict.all[,1] + predict.all[,2] + predict.all[,3], data=predict.all, method="rf")
fit.final
final <- predict(fit.final, newdata=testing)
final
confusionMatrix(final, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?plot.enet
?plot.enet)
?plot.enet
?plot.net
head(training)
fit <- train(CompressiveStrength ~., data=training, method="lasso")
fit <- train(CompressiveStrength ~., data=training, method="lasso")
fit
summary(fit)
fit$finalModel
head(training)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(url, destfile="gaData.csv", method="curl")
dat <- read.csv("gaData.csv")
head(dat)
library(lubridate)
install.packages("lubridate")
library(lubridate)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
install.packages("forecast")
library(forecast)
?bats
?Op
install.packages("quantmod")
library(quantmod)
?Op
head(training)
tstrain
plot(tstrain)
?decompose
decompose(tstrain)
plot(decomepose(tstrain))
plot(decompose(tstrain))
?bats
fit <- bats(training)
fit <- bats(tstrain)
fit
predict <- predict(fit, testing)
predict
predict$finalModel
fit
summary(fit)
fit$finalModel
predict(fit, testing, interval="prediction")
predict(fit, testing, intervals="prediction")
?predict
predict(fit, testing, interval=("prediction"))
predict <- predict(fit, testing, interval=("prediction"))
predict
plot(predict)
predict
head(testing)
confusionMatrix(predict, testing$visitsTumblr)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
head(training)
fit <- train(CompressiveStrength ~., data=training, method="lasso")
plot(fit)
fit
fit$finalModel
fit$enet
fit$finalModel$enet
fit$finalModel.enet
plot.enet(fit)
plot.enet(fit$finalModel)
getwd()
setwd("./ml-wk4")
setwd("../ml-wk4")
setwd("./pml-wk4")
getwd()
download.file(train.url, destfile="pml-training.csv", method="curl")
train.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(train.url, destfile="pml-training.csv", method="curl")
download.file(test.url, destfile="pml-testing.csv", method="curl")
test.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(test.url, destfile="pml-testing.csv", method="curl")
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-test.csv")
testing <- read.csv("pml-testing.csv")
head(training)
View(training)
nrow(training)
nrow(testing)
dim(training)
dim(testing)
?read.csv
sum(is.na(training))
sum(is.na(testing))
View(testing)
head(training)
class(trianing[,12])
class(training[,12])
head(training[,12])
training[1,12]
training[1,12] == NA
training[1,12] == ""
head(training$class)
head(testing)
testing
complete.cases(testing)
dim(testing)
complete.cases(testing)
head(testing)
apply(testing, 2, function(x) {sum(is.na(x))})
class(apply(testing, 2, function(x) {sum(is.na(x))}))
colnames(testing[,1])
colname(testing[,1])
colnames(testing)
colnames(testing[,2])
colnames(testing[,3])
class(testing)
names(testing)
names(testing[,2])
testing$problem_id
names(testing$problem_id)
colnames(testing$problem_id)
name(testing$problem_id)
apply(testing, 2, function(x) {
if(sum(is.na(x)) == 20) {
print(colnames(x))
}
})
apply(testing, 2, function(x) {
if(sum(is.na(x)) == 20) {
print(names(x))
}
})
apply(testing, 2, function(x) {
if(sum(is.na(x)) == 20) {
print(x)
}
})
apply(testing, 2, function(x) {
if(sum(is.na(x)) == 20) {
print(x)
}
else return
})
na.list <- c()
apply(testing, 2, function(x) {
if(sum(is.na(x)) == 20) {
na.list <<- c(na.list, x)
}
else return
})
na.list
apply(testing, 2, function(x) {
if(sum(is.na(x)) == 20) {
print(x)
}
else return
})
apply(testing, 2, function(x) {
if(sum(is.na(x)) == 20) {
print(x)
}
else return
})[1]
sapply(colnames(testing), function(x) {
if(sum(is.na(x)) == 20) {
print(x)
}
else return
})
sapply(colnames(testing), function(x) {sum(is.na(x))})
sapply(colnames(testing), function(x) {sum(is.na(testing[,x]))})
checkNA <- function(x) {
if(sum(is.na(testing[,x])) == 20) {
print(x)
}
else return
}
sapply(colnames(testing), checkNA)
rm(na.list)
na.list <- c()
checkNA <- function(x) {
if(sum(is.na(testing[,x])) == 20) {
na.list <<- c(na.list, x)
}
else return
}
sapply(colnames(testing), checkNA)
na.list
head(testing)
invisible(sapply(colnames(testing), checkNA))
na.list
head(na.list)
length(na.list)
ncol(testing)
rm(na.list)
na.list
na.list <- c()
checkNA <- function(x) {
if(sum(is.na(testing[,x])) == 20) {
na.list <<- c(na.list, x)
}
else return
}
invisible(sapply(colnames(testing), checkNA))
## now na.list contains all the features we should not be using since testing data set has no data for them
head(na.list)
na.list
nrow(na.list)
length(na.list)
View(testing)
head(training$class)
folds <- createFolds(y=training$class, k=10, list=TRUE, returnTrain=TRUE)
folds
sapply(folds, length)
head(folds)
folds[1]
folds <- createResample(y=training$class, k=10, list=TRUE)
folds <- createResample(y=training$class, times=10, list=TRUE)
folds
s
folds <- createFolds(y=training$class, k=10, list=TRUE, returnTrain=TRUE)
sapply(folds, length)
folds[[1]][1:5]
training[folds[[1]][1:5]]
training[folds[1][1:10],]
training[folds[1][1:10]]
head(training)
folds[[1]]
training[folds[[1]][1:5]]
training[folds[[1]],]
head(folds[[1]])
length(folds[[1]])
length(folds)
nrow(training)
sapply(folds, length)
17660/19622
head(training)
head(training[-na.list,])
na.list
head(training[,-na.list])
head(training[, %in% na.list])
training[,na.list]
training[,!na.list]
subset(training, na.list)
subset(training, na.list != TRUE)
subset(training, na.list != TRUE)[1:5,]
subset(training, select=c(na.list))
subset(training, select!=c(na.list))
dim(subset(training, select=c(na.list)))
subset(training, %in% na.list)
subset(training, ! (select =c(na.list)))
subset(training, colnames(training) ! %in% na.list)
subset(training, !colnames(training) %in% na.list)
colnames(training)
colnames(training) %in% na.list
na.list
subset(training, !colnames(training) %in% na.list)
dim(subset(training, !colnames(training) %in% na.list))
subset(training, colnames(training) %in% na.list == FALSE)
dim(subset(training, colnames(training) %in% na.list == FALSE))
training[, colnames(training) %in% na.list]
dim(training[, colnames(training) %in% na.list])
training[, !colnames(training) %in% na.list]
dim(training[, !colnames(training) %in% na.list])
train.clean <- training[, !colnames(training) %in% na.list]
head(train.clean)
train.clean <- training[, !colnames(training) %in% na.list]
hist(train.clean$raw_timestamp_part_1)
hist(train.clean$roll_belt)
hist(train.clean$magnet_belt_z)
hist(train.clean$magnet_forearm_y)
hist(subset(train.clean, classe=A)$magnet_forearm_y)
hist(subset(train.clean, classe=A)$magnet_belt_y)
xlabs="test"
hist(subset(train.clean, classe=A)$magnet_belt_y)
hist(subset(train.clean, classe=A)$magnet_belt_y, main="text")
hist(subset(train.clean, classe=A)$magnet_belt_y, main="Histogram of magnet_belt_y for Classe A")
hist(subset(train.clean, classe=A)$magnet_forearm_y, main="Histogram of magnet_forearm_y for Classe A")
hist(subset(train.clean, classe=A)$magnet_belt_y, main="Histogram of magnet_belt_y for Classe A")
head(train.clean)
for(i in 1:10) {
in.training <- training[folds[[i]], !colnames(training) %in% na.list]
in.testing <- training[-folds[[i]], !colnames(training) %in% na.list]
## fit a glm binomial model
fit.glm <- train(classe ~ ., data=in.training, method="glm", family="binomial")
predict.glm <- predict(fit.glm, newdata=in.testing)
confusionMatrix(predict.glm, in.testing$classe)
}
for(i in 1:10) {
in.training <- training[folds[[i]], !colnames(training) %in% na.list]
in.testing <- training[-folds[[i]], !colnames(training) %in% na.list]
## fit a glm binomial model
##fit.glm <- train(classe ~ ., data=in.training, method="glm", family="binomial")
fit.glm <- glm(classe ~., data=in.training, family="binomial")
predict.glm <- predict(fit.glm, newdata=in.testing)
confusionMatrix(predict.glm, in.testing$classe)
}
headd(train.clean)
head(train.clean)
fit.test <- glm(classe ~ ., data=train.clean, family="binomial")
glm.fit
fit.glm
predict.test <- predict(fit.glm, newdata=train.clean)
predict.test <- predict(fit.glm, newdata=train.clean, type="response")
summary(fit.glm)
head(train.clean)
fit.lm <- train(classe ~ train.clean[,-c(1:5)], data=train.clean, method="lm")
fit.lm <- train(classe ~ train.clean[,-1:5], data=train.clean, method="lm")
fit.lm <- train(classe ~ train.clean[,-(1:5)], data=train.clean, method="lm")
fit.lm <- train(classe ~ train.clean[,6:ncol(train.clean)], data=train.clean, method="lm")
ncol(train.clean)
fit.lm <- train(classe ~ train.clean[,6:59], data=train.clean, method="lm")
head(train.clean)
fit.lm <- train(y=classe,x=train.clean[,6:59], data=train.clean, method="lm")
fit.lm <- train(y=train.clean$classe,x=train.clean[,6:59], data=train.clean, method="lm")
?train
fit.lm <- train(x=train.clean[, 6:59], y=train.clean$classe, method="lm")
head(train.clean[,6:59])
fit.lm <- train(x=train.clean[, 6:59], y=train.clean$classe, method="rf")
for(i in 1:10) {
in.training <- training[folds[[i]], !colnames(training) %in% na.list]
in.testing <- training[-folds[[i]], !colnames(training) %in% na.list]
## fit a randomForest, keeping everything except the name and timestamps
fit.rf <- train(x=in.training[,6:59], y=in.training$classe, method="rf")
predict.rf <- predict(fit.rf, newdata=in.testing)
confusionMatrix(predict.rf, in.testing$classe)
}
in.training <- training[folds[[1]], !colnames(training) %in% na.list]
in.testing <- training[-folds[[1]], !colnames(training) %in% na.list]
head(in.training)
head(in.testing)
fit.gbm <- train(x=in.training[,6:59], y=in.training$classe, method="gbm")
in.training <- training[folds[[1]], !colnames(training) %in% na.list]
in.testing <- training[-folds[[1]], !colnames(training) %in% na.list]
fit.gbm <- train(x=in.training[,6:59], y=in.training$classe, method="gbm", n.trees=20)
fit.gbm
rm(fit.gbm)
fit.gbm <- train(x=in.training[,6:59], y=in.training$classe, method="gbm", n.trees=3)
fit.gbm
fit.rpart <- train(x=in.training[,6:59], y=in.training$classe, method="rpart")
fit.rpart
predict.rpart <- predict(fit.rpart, newdata=in.testing)
confusionMatrix(predict.rpart, in.testing$classe)
